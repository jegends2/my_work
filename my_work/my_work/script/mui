import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from nav2_msgs.action import NavigateToPose
from geometry_msgs.msg import PoseStamped, Point, Quaternion
from std_msgs.msg import Header
import json
import time
import numpy as np
from nav_msgs.msg import OccupancyGrid

class PathNavigator(Node):
    def __init__(self):
        super().__init__('path_navigator')
        
        # Action Client 초기화
        self._action_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        
        # 로컬 비용 맵 구독자 초기화
        self._costmap_subscriber = self.create_subscription(
            OccupancyGrid,
            'local_costmap',
            self._costmap_callback,
            10
        )
        self._costmap = None
        
        # 경로 로딩
        self._load_path('path_try.json')
        
        # 목표 도달 여부 확인
        self._goal_reached = False
        self._max_retries = 3  # 장애물로 인해 재시도할 최대 횟수
        self._current_retry = 0
        self._iteration_count = 1  # 초기 반복 횟수
        self._current_goal_index = 0
        
        # 사용자 입력 대기
        self._get_user_input()

    def _load_path(self, file_name):
        with open(file_name, 'r') as f:
            self._path = json.load(f)
        
        # 첫 번째 포인트를 목표로 설정
        if len(self._path['points']) > 0:
            self._current_goal_index = 0
            self._send_goal(self._path['points'][self._current_goal_index])
        else:
            self.get_logger().error('No points found in the path file.')

    def _send_goal(self, goal_point):
        self.get_logger().info(f'Sending goal: {goal_point}')
        
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose.header = Header(frame_id='map')
        goal_msg.pose.pose.position = Point(x=goal_point['x'], y=goal_point['y'], z=0.0)
        goal_msg.pose.pose.orientation = Quaternion(x=0.0, y=0.0, z=0.0, w=1.0)
        
        self._action_client.wait_for_server()
        self._action_client.send_goal_async(goal_msg, feedback_callback=self._feedback_callback)
        
        self.get_logger().info('Goal accepted.')
        self._goal_reached = False
        self._current_retry = 0
        self._wait_for_goal()

    def _wait_for_goal(self):
        while not self._goal_reached and rclpy.ok():
            if not self._check_obstacles(self._path['points'][self._current_goal_index]):
                # 장애물 확인 중 대기
                self.get_logger().info('Obstacle detected. Waiting...')
                time.sleep(1)  # 대기 시간 (필요에 따라 조정 가능)
                
                self._current_retry += 1
                if self._current_retry < self._max_retries:
                    self.get_logger().info('Retrying...')
                    self._send_goal(self._path['points'][self._current_goal_index])
                else:
                    self.get_logger().info('Max retries exceeded. Skipping to next goal.')
                    self._current_goal_index += 1
                    if self._current_goal_index < len(self._path['points']):
                        self._send_goal(self._path['points'][self._current_goal_index])
                    else:
                        self.get_logger().info('Iteration complete.')
                        self._iteration_count -= 1
                        if self._iteration_count > 0:
                            # 재시작 시 첫 목표로 돌아가기
                            self._current_goal_index = 0
                            self._send_goal(self._path['points'][self._current_goal_index])
                        else:
                            self.get_logger().info('All goals completed.')
                            self._get_user_input()
            else:
                rclpy.spin_once(self)
                time.sleep(0.5)

    def _feedback_callback(self, feedback_msg):
        # 피드백 메시지에서 현재 위치 정보를 확인하고 출력합니다.
        current_pose = feedback_msg.feedback.current_pose.pose
        self.get_logger().info(f'Feedback: {current_pose}')
        
        goal_pose = self._path['points'][self._current_goal_index]
        goal_tolerance = 0.35  # Goal tolerance 값을 설정합니다.
        
        if self._is_goal_reached(current_pose, goal_pose, goal_tolerance):
            self.get_logger().info('Goal reached.')
            self._goal_reached = True
        else:
            self.get_logger().info('Goal is active and still being processed.')

    def _is_goal_reached(self, current_pose, goal_pose, tolerance):
        distance = ((current_pose.position.x - goal_pose['x']) ** 2 +
                    (current_pose.position.y - goal_pose['y']) ** 2) ** 0.5
        return distance < tolerance

    def _get_user_input(self):
        # 사용자로부터 입력을 받아서 경로 반복 횟수를 설정합니다.
        try:
            user_input = int(input("Enter number of iterations (1 for once, 2 for twice, etc.): "))
            if user_input < 1:
                raise ValueError("Input must be 1 or greater.")
            self._iteration_count = user_input
            self._current_goal_index = 0
            if len(self._path['points']) > 0:
                self._send_goal(self._path['points'][self._current_goal_index])
        except ValueError as e:
            self.get_logger().error(f'Invalid input: {e}')
            self._get_user_input()

    def _check_obstacles(self, goal_point):
        if self._costmap is None:
            return True  # 비용 맵이 아직 로드되지 않았다면 장애물이 있는 것으로 간주
        
        # 목표 위치를 비용 맵의 좌표로 변환
        costmap_width = self._costmap.info.width
        costmap_height = self._costmap.info.height
        resolution = self._costmap.info.resolution
        origin_x = self._costmap.info.origin.position.x
        origin_y = self._costmap.info.origin.position.y
        
        # 목표 위치를 costmap 좌표로 변환
        map_x = int((goal_point['x'] - origin_x) / resolution)
        map_y = int((goal_point['y'] - origin_y) / resolution)
        
        if 0 <= map_x < costmap_width and 0 <= map_y < costmap_height:
            # 장애물 확인 (비용 맵 값이 100이면 장애물로 간주)
            index = map_y * costmap_width + map_x
            return self._costmap.data[index] != 100
        
        return False

    def _costmap_callback(self, msg):
        self._costmap = msg
        self.get_logger().info('Costmap updated.')

def main(args=None):
    rclpy.init(args=args)
    node = PathNavigator()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
